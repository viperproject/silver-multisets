import "../mset.vpr"


field val: Bool

domain Array {
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function first(r: Ref): Array
    function second(r: Ref): Int

    axiom array_length {
      forall a: Array :: { length(a) } length(a) >= 0
    }

    axiom all_diff {
    forall a: Array, i: Int :: {loc(a, i)}
        first(loc(a, i)) == a && second(loc(a, i)) == i
    }
}

function a2s(a: Array): Seq[Int]
  requires forall i: Int :: 0 <= i && i < length(a) ==> acc(loc(a,i).val)
  ensures |result| == length(a)
  //ensures  forall i: Int :: { loc(a,i).val } { result[i] } 0 <= i && i < length(a) ==> result[i] == (loc(a,i).val ? 1 : 0)
  ensures  forall i: Int :: { loc(a,i).val } { result[i] } i in [0..length(a)) ==> result[i] == (loc(a,i).val ? 1 : 0)


method two_way_sort(a: Array)
  // Works for empty arrays, too. 
  //requires length(a) > 0
  requires forall z: Int :: 0 <= z && z < length(a) ==> acc(loc(a,z).val)
  ensures  forall z: Int :: 0 <= z && z < length(a) ==> acc(loc(a,z).val)

  // The resulting array is sorted in ascending order. 
  ensures forall y: Int, z: Int :: { loc(a,y).val, loc(a,z).val } 0 <= y && y < z && z < length(a) ==> lte(loc(a,y).val, loc(a,z).val)

  // The number of false elements in the resulting state of the array is the same as in the initial state.   
  ensures MultiSet_Equal( MultiSet_FromSeq(a2s(a)), old(MultiSet_FromSeq(a2s(a))) )
{
  var i: Int := 0
  var j: Int := length(a) - 1  

  var xs: Seq[Int] 
  var ys: Seq[Int]
  var zs: Seq[Int]

  while ( i <= j )
    invariant 0 <= i && i <= j + 1 && j < length(a)
    invariant forall z: Int :: 0 <= z && z < length(a) ==> acc(loc(a,z).val)
    

    // The segment [0..i) contains only false elements
    // The segment [i..j] contains both false and true elements (invariant omitted)
    // The segment (j..length(a)) contains only 
    invariant forall z: Int :: { loc(a,z).val } 0 <= z && z < i ==> !loc(a,z).val
    invariant forall z: Int :: { loc(a,z).val } j < z && z < length(a) ==> loc(a,z).val

    invariant MultiSet_Equal( MultiSet_FromSeq(a2s(a)), old(MultiSet_FromSeq(a2s(a))) )
  {
    if ( !loc(a,i).val ) {
      i := i+1
    }
    elseif ( loc(a,j).val ) {
      j := j-1
    }
    else {
      xs := a2s(a)
      swap(a, i, j)
      ys := a2s(a)
      zs := xs [j := xs[i]] [i := xs[j]]
      assert forall z: Int :: z in [0..length(a)) ==> zs[z] == ys[z]
      //assert forall z: Int :: {ys[z]} 0 <= z && z < length(a) ==> zs[z] == ys[z]
      assert zs == ys


      i := i+1
      j := j-1
    }
  }
}

method swap(a: Array, i: Int, j: Int)
  requires acc(loc(a,i).val) && acc(loc(a,j).val)
  ensures  acc(loc(a,i).val) && acc(loc(a,j).val)
  ensures loc(a,i).val == old(loc(a,j).val)
  ensures loc(a,j).val == old(loc(a,i).val)  
{
  var temp: Bool := loc(a,i).val
  loc(a,i).val := loc(a,j).val
  loc(a,j).val := temp
}

function lte(b1: Bool, b2: Bool): Bool {
  !b1 || b2
}

//@TIMING:{"total":6.561,"timings":[4,233,372,400,6348,6360,6578,6673]}
