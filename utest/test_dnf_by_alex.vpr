import "../mset.vpr" 

define RED 0
define WHITE 1
define BLUE 2

define ordered(a,i,j) loc(a,i).val <= loc(a,j).val

define access(a) forall i: Int :: 0 <= i && i < length(a) ==> acc(loc(a,i).val)

method DutchFlag(a: Array)
  requires access(a)
  requires forall i : Int :: 0 <= i && i < length(a) ==> loc(a,i).val == RED || loc(a,i).val == WHITE || loc(a,i).val == BLUE
  ensures access(a)
  ensures forall i:Int, j: Int :: 0 <= i && i < j && j < length(a) ==> ordered(a,i,j)
  ensures MultiSet_Equal( MultiSet_FromSeq(a2s(a)), old(MultiSet_FromSeq(a2s(a))) ) 
{
  var unsorted : Int := 0
  var white : Int := 0
  var blue : Int := length(a)

  var xs: Seq[Int] 
  var ys: Seq[Int]
  var zs: Seq[Int]


  while (unsorted < blue)
  invariant access(a)
  invariant 0 <= white && white <= unsorted && unsorted <= blue && blue <= length(a)
  invariant forall i : Int :: 0 <= i && i < length(a) ==> loc(a,i).val == RED || loc(a,i).val == WHITE || loc(a,i).val == BLUE
  invariant forall i : Int :: 0<= i && i < white ==> loc(a,i).val == RED
  invariant forall i : Int :: white<= i && i < unsorted ==> loc(a,i).val == WHITE
  invariant forall i : Int :: blue<= i && i < length(a) ==> loc(a,i).val == BLUE
  invariant MultiSet_Equal( MultiSet_FromSeq(a2s(a)), old(MultiSet_FromSeq(a2s(a))) ) 
  {
    var tmp : Int := loc(a,unsorted).val
    if(tmp == WHITE) {
      unsorted := unsorted + 1
    } elseif(tmp == RED) {
      xs := a2s(a)

      loc(a,unsorted).val := loc(a,white).val
      loc(a,white).val := tmp


      ys := a2s(a)
      zs := xs [unsorted := xs[white]] [white := xs[unsorted]]
      assert forall z: Int :: z in [0..length(a)) ==> zs[z] == ys[z]
      assert zs == ys


      white := white + 1
      unsorted := unsorted + 1
    } else {
      xs := a2s(a)

      loc(a,unsorted).val := loc(a,blue - 1).val
      blue := blue - 1
      loc(a,blue).val := tmp


      ys := a2s(a)
      zs := xs [blue := xs[unsorted]] [unsorted := xs[blue]]
      assert forall z: Int :: z in [0..length(a)) ==> zs[z] == ys[z]
      assert zs == ys
    }
  }
}

field val: Int // array slot value

domain Array {
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function first(r: Ref): Array
    function second(r: Ref): Int

    axiom array_length {
      forall a: Array :: { length(a) } length(a) >= 0
    }

    axiom all_diff {
    forall a: Array, i: Int :: {loc(a, i)}
        first(loc(a, i)) == a && second(loc(a, i)) == i
    }
}

function a2s(a: Array): Seq[Int]
  requires forall i: Int :: i in [0..length(a)) ==> acc(loc(a,i).val)
  ensures |result| == length(a)
  ensures  forall i: Int :: { loc(a,i).val } { result[i] } i in [0..length(a)) ==> result[i] == loc(a,i).val
