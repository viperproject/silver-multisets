/*
    This encoding is based on 
    the translation of Dafny's 
    MultiSets encoding to Boogie.

    Created on June 14th, 2016 
    (last modified on June 27th, 2016)
    by Arshavir Ter-Gabrielyan
    at ETH ZÃ¼rich 
*/

domain Math {

    function Math_Clip(a: Int): Int
    function Math_Min(a: Int, b: Int): Int


    axiom math_clip_nonneg {
        forall a: Int :: { Math_Clip(a) } 0 <= a ==> Math_Clip(a) == a
    }

    axiom math_clip_neg {
        forall a: Int :: { Math_Clip(a) } a < 0 ==> Math_Clip(a) == 0
    }

    axiom math_min {
        true
        && ( forall a: Int, b: Int :: { Math_Min(a,b) } a <= b <==> Math_Min(a,b) == a )
        && ( forall a: Int, b: Int :: { Math_Min(a,b) } b <= a <==> Math_Min(a,b) == b )
        && ( forall a: Int, b: Int :: { Math_Min(a,b) } Math_Min(a,b) == a || Math_Min(a,b) == b )
    }
}

domain MultiSet {

    function ___IsGoodMultiSet___(ms: MultiSet): Bool
    function _(ms: MultiSet, e: Int): Int // mapping function; returns the number of "e"s in ms.
    function MultiSet_Includes(ms: MultiSet, e: Int): Bool
    function MultiSet_Update(ms: MultiSet, x: Int, n: Int): MultiSet // updates (the number of "x"s in ms) with n. 
    function MultiSet_Card(ms: MultiSet): Int // cardinality
    function MultiSet_Empty(): MultiSet
    function MultiSet_Singleton(e: Int): MultiSet
    function MultiSet_UnionOne(ms: MultiSet, e: Int): MultiSet
    function MultiSet_Union(msx: MultiSet, msy: MultiSet): MultiSet
    function MultiSet_Intersection(msx: MultiSet, msy: MultiSet): MultiSet
    function MultiSet_Difference(msx: MultiSet, msy: MultiSet): MultiSet
    //function MultiSet_Subset(msx: MultiSet, msy: MultiSet): Bool
    function MultiSet_Equal(msx: MultiSet, msy: MultiSet): Bool
    //function MultiSet_Disjoint(msx: MultiSet, msy: MultiSet): Bool
    //function MultiSet_FromSet(set: Set[Int]): MultiSet
    function MultiSet_FromSeq(seq: Seq[Int]): MultiSet
    
    axiom ms_includes {
        forall ms: MultiSet, e: Int :: 
            { MultiSet_Includes(ms,e) }
                MultiSet_Includes(ms,e) <==> 0 < _(ms,e)
    }

    axiom ms_update {
        forall ms: MultiSet, x: Int, n: Int :: 
            { MultiSet_Update(ms, x, n) }
                _(MultiSet_Update(ms, x, n), x) == n
    }

    axiom ms_good_multiSet { 
        forall ms: MultiSet :: 
            { ___IsGoodMultiSet___(ms) } 
                ___IsGoodMultiSet___(ms) <==> 
                forall bx: Int :: { _(ms,bx) } 0 <= _(ms,bx) && _(ms,bx) <= MultiSet_Card(ms)
    }

    axiom ms_card_nonneg {
        forall ms: MultiSet :: { MultiSet_Card(ms) } 0 <= MultiSet_Card(ms)
    }

    /*
        axiom (forall<T> s: MultiSet T, x: T, n: int :: 
          { MultiSet#Card(s[x := n]) } 
          0 <= n ==> MultiSet#Card(s[x := n]) == MultiSet#Card(s) - s[x] + n);
    */
    axiom ms_card_update {
        forall ms: MultiSet, x: Int, n: Int ::
            { MultiSet_Card( MultiSet_Update(ms,x,n) ) }
                0 <= n ==> MultiSet_Card( MultiSet_Update(ms,x,n) ) == MultiSet_Card(ms) - _(ms,x) + n
    }

    axiom ms_empty {
        forall o: Int :: { _(MultiSet_Empty(),o) } _(MultiSet_Empty(),o) == 0 
    }

    axiom ms_empty_card {
        forall ms: MultiSet ::
            { MultiSet_Card(ms) }
                ( MultiSet_Card(ms) == 0 <==> ms == MultiSet_Empty() ) && 
                ( MultiSet_Card(ms) != 0 <==> exists x: Int :: 0 < _(ms,x) )
    }

    axiom ms_singleton {
        forall r: Int, o: Int ::
            { _(MultiSet_Singleton(r),o) }
                ( _(MultiSet_Singleton(r),o) == 1 <==> r == o ) &&
                ( _(MultiSet_Singleton(r),o) == 0 <==> r != o )
    }

    axiom ms_singleton_from_empty {
        forall r: Int :: 
            { MultiSet_Singleton(r) }
                MultiSet_Singleton(r) == MultiSet_UnionOne(MultiSet_Empty(), r)
    }

    axiom ms_unionone {
        forall ms: MultiSet, x: Int, o: Int :: 
            { _(MultiSet_UnionOne(ms, x),o) }
                0 < _(MultiSet_UnionOne(ms, x),o) <==> o == x || 0 < _(ms,o) 
    }

    axiom ms_unionone_plus_one {
        forall ms: MultiSet, x: Int ::
            { MultiSet_UnionOne(ms, x) }
                _(MultiSet_UnionOne(ms, x),x) == _(ms,x) + 1 
    }

    axiom ms_unionone_lookup_nonneg {
        forall ms: MultiSet, x: Int, y: Int :: 
            { MultiSet_UnionOne(ms, x), _(ms,y) }
                0 < _(ms,y) ==> 0 < _(MultiSet_UnionOne(ms, x),y)
    }

    axiom ms_unionone_lookup {
        forall ms: MultiSet, x: Int, y: Int ::
            { MultiSet_UnionOne(ms, x), _(ms,y) }
                x != y ==> _(ms,y) == _(MultiSet_UnionOne(ms, x),y)
    }

    axiom ms_unionone_card {
        forall ms: MultiSet, x: Int ::
            { MultiSet_Card(MultiSet_UnionOne(ms, x)) }
                MultiSet_Card(MultiSet_UnionOne(ms, x)) == MultiSet_Card(ms) + 1
    }

    axiom ms_union {
        forall msx: MultiSet, msy: MultiSet, o: Int ::
            { _(MultiSet_Union(msx,msy),o) } 
                _(MultiSet_Union(msx,msy),o) == _(msx,o) + _(msy,o)
    }

    axiom ms_union_card {
        forall msx: MultiSet, msy: MultiSet :: 
            { MultiSet_Card(MultiSet_Union(msx,msy)) }
                MultiSet_Card(MultiSet_Union(msx,msy)) == MultiSet_Card(msx) + MultiSet_Card(msy)
    }

    axiom ms_intersection {
        forall msx: MultiSet, msy: MultiSet, o: Int :: 
            { _(MultiSet_Intersection(msx,msy),o) }
                _(MultiSet_Intersection(msx,msy),o) == Math_Min(_(msx,o), _(msy,o))
    }

    axiom ms_intersection_double_1 {
        forall msx: MultiSet, msy: MultiSet ::
            { MultiSet_Intersection(MultiSet_Intersection(msx,msy), msy) }
                MultiSet_Intersection(MultiSet_Intersection(msx,msy), msy) == 
                MultiSet_Intersection(msx,msy)
    }

    axiom ms_intersection_double_2 {
        forall msx: MultiSet, msy: MultiSet ::
            { MultiSet_Intersection(msx, MultiSet_Intersection(msx,msy)) }
                MultiSet_Intersection(msx, MultiSet_Intersection(msx,msy)) == 
                MultiSet_Intersection(msx,msy)
    }

    axiom ms_difference {
        forall msx: MultiSet, msy: MultiSet, o: Int ::
            { _(MultiSet_Difference(msx,msy),o) }
                _(MultiSet_Difference(msx,msy),o) == Math_Clip(_(msx,o) - _(msy,o))
    }

    axiom ms_difference_zero {
        forall msx: MultiSet, msy: MultiSet, o: Int ::
            { MultiSet_Difference(msx,msy), _(msy,o), _(msx,o) }
                _(msx,o) <= _(msy,o) ==> _(MultiSet_Difference(msx,msy),o) == 0
    }
    axiom ms_difference_card {
        forall msx: MultiSet, msy: MultiSet :: 
            { MultiSet_Card(MultiSet_Difference(msx,msy)) }
                (
                    MultiSet_Card(MultiSet_Difference(msx,msy)) + 
                    MultiSet_Card(MultiSet_Difference(msy,msx)) +
                    2 * MultiSet_Card(MultiSet_Intersection(msx,msy)) 
                    == MultiSet_Card(MultiSet_Union(msx,msy))
                ) && ( 
                    MultiSet_Card(MultiSet_Difference(msx,msy)) 
                    == MultiSet_Card(msx) - MultiSet_Card(MultiSet_Intersection(msx,msy))
                )
    }

    //axiom ms_subset_

    axiom ms_equal {
        forall msx: MultiSet, msy: MultiSet :: 
            { MultiSet_Equal(msx, msy) }
                MultiSet_Equal(msx, msy) <==> 
                forall o: Int :: { _(msx,o) } { _(msy,o) } _(msx,o) == _(msy,o)
    }

    axiom ms_equal_relation {
        forall msx: MultiSet, msy: MultiSet ::
            { MultiSet_Equal(msx, msy) }
                MultiSet_Equal(msx, msy) ==> msx == msy
    }

    //axiom ms_disjoint

    //axiom ms_from_set

    axiom ms_from_seq_good {
        forall s: Seq[Int] :: 
            { MultiSet_FromSeq(s) }
                ___IsGoodMultiSet___(MultiSet_FromSeq(s))
    }    

    axiom ms_from_seq_card {
        forall s: Seq[Int] :: 
            { MultiSet_Card(MultiSet_FromSeq(s)) }
                MultiSet_Card(MultiSet_FromSeq(s)) == |s|
    }

    axiom ms_from_seq_append {
        forall s: Seq[Int], v: Int :: 
            { MultiSet_FromSeq(s ++ Seq(v)) }
                MultiSet_FromSeq(s ++ Seq(v)) == MultiSet_UnionOne(MultiSet_FromSeq(s), v)
    } 

    /*
    axiom ms_from_seq_empty {
        MultiSet_FromSeq(Seq[Int]()) == MultiSet_Empty()
    }*/
    
    axiom ms_from_seq_union {
        forall sa: Seq[Int], sb: Seq[Int] ::
            { MultiSet_FromSeq(sa ++ sb) }
                  MultiSet_FromSeq(sa ++ sb) == MultiSet_Union(MultiSet_FromSeq(sa), MultiSet_FromSeq(sb))
    }

    axiom ms_from_seq_update {
        forall s: Seq[Int], i: Int, v: Int, x: Int ::
            { _(MultiSet_FromSeq(s[i := v]),x) }
                0 <= i && i < |s| ==>
                    _(MultiSet_FromSeq(s[i := v]), 
                    x) == 
                    _(MultiSet_Union( 
                        MultiSet_Difference( MultiSet_FromSeq(s), MultiSet_Singleton(s[i]) ), 
                        MultiSet_Singleton(v) ),
                    x)
    }

    axiom ms_from_seq_exists {
        forall s: Seq[Int], x: Int :: 
            { _(MultiSet_FromSeq(s),x) }
                ( exists i: Int :: 
                    //{ s[i] }
                        0 <= i && i < |s| && x == s[i] )
                        <==> 0 < _(MultiSet_FromSeq(s),x) 
    }

    /*axiom ms_from_seq_swap {
        forall s: Seq[Int], i: Int, j: Int, x: Int ::
            { _(MultiSet_FromSeq(s[i:=s[j]][j:=s[i]]),x) }
                _(MultiSet_FromSeq(s[i:=s[j]][j:=s[i]]),x) ==
                _(MultiSet_FromSeq(s),x)
    }*/
}

/*
MultiSet encoding from Dafny
----------------------------

type MultiSet T = [T]int;

function $IsGoodMultiSet<T>(ms: MultiSet T) : bool;

axiom (forall<T> ms: MultiSet T :: 
  { $IsGoodMultiSet(ms) } 
  $IsGoodMultiSet(ms)
     <==> (forall bx: Int :: { ms[bx] } 0 <= ms[bx] && ms[bx] <= MultiSet#Card(ms)));

function MultiSet#Card<T>(MultiSet T) : int;

axiom (forall<T> s: MultiSet T :: { MultiSet#Card(s) } 0 <= MultiSet#Card(s));

axiom (forall<T> s: MultiSet T, x: Int, n: int :: 
  { MultiSet#Card(s[x := n]) } 
  0 <= n ==> MultiSet#Card(s[x := n]) == MultiSet#Card(s) - s[x] + n);

function MultiSet#Empty<T>() : MultiSet T;

axiom (forall<T> o: Int :: { MultiSet#Empty()[o] } MultiSet#Empty()[o] == 0);

axiom (forall<T> s: MultiSet T :: 
  { MultiSet#Card(s) } 
  (MultiSet#Card(s) == 0 <==> s == MultiSet#Empty())
     && (MultiSet#Card(s) != 0 ==> (exists x: Int :: 0 < s[x])));

function MultiSet#Singleton<T>(T) : MultiSet T;

axiom (forall<T> r: Int, o: Int :: 
  { MultiSet#Singleton(r)[o] } 
  (MultiSet#Singleton(r)[o] == 1 <==> r == o)
     && (MultiSet#Singleton(r)[o] == 0 <==> r != o));

axiom (forall<T> r: Int :: 
  { MultiSet#Singleton(r) } 
  MultiSet#Singleton(r) == MultiSet#UnionOne(MultiSet#Empty(), r));

function MultiSet#UnionOne<T>(MultiSet T, T) : MultiSet T;

axiom (forall<T> a: MultiSet T, x: Int, o: Int :: 
  { MultiSet#UnionOne(a, x)[o] } 
  0 < MultiSet#UnionOne(a, x)[o] <==> o == x || 0 < a[o]);

axiom (forall<T> a: MultiSet T, x: Int :: 
  { MultiSet#UnionOne(a, x) } 
  MultiSet#UnionOne(a, x)[x] == a[x] + 1);

axiom (forall<T> a: MultiSet T, x: Int, y: Int :: 
  { MultiSet#UnionOne(a, x), a[y] } 
  0 < a[y] ==> 0 < MultiSet#UnionOne(a, x)[y]);

axiom (forall<T> a: MultiSet T, x: Int, y: Int :: 
  { MultiSet#UnionOne(a, x), a[y] } 
  x != y ==> a[y] == MultiSet#UnionOne(a, x)[y]);

axiom (forall<T> a: MultiSet T, x: Int :: 
  { MultiSet#Card(MultiSet#UnionOne(a, x)) } 
  MultiSet#Card(MultiSet#UnionOne(a, x)) == MultiSet#Card(a) + 1);

function MultiSet#Union<T>(MultiSet T, MultiSet T) : MultiSet T;

axiom (forall<T> a: MultiSet T, b: MultiSet T, o: Int :: 
  { MultiSet#Union(a, b)[o] } 
  MultiSet#Union(a, b)[o] == a[o] + b[o]);

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Card(MultiSet#Union(a, b)) } 
  MultiSet#Card(MultiSet#Union(a, b)) == MultiSet#Card(a) + MultiSet#Card(b));

function MultiSet#Intersection<T>(MultiSet T, MultiSet T) : MultiSet T;

axiom (forall<T> a: MultiSet T, b: MultiSet T, o: Int :: 
  { MultiSet#Intersection(a, b)[o] } 
  MultiSet#Intersection(a, b)[o] == Math#min(a[o], b[o]));

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Intersection(MultiSet#Intersection(a, b), b) } 
  MultiSet#Intersection(MultiSet#Intersection(a, b), b)
     == MultiSet#Intersection(a, b));

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Intersection(a, MultiSet#Intersection(a, b)) } 
  MultiSet#Intersection(a, MultiSet#Intersection(a, b))
     == MultiSet#Intersection(a, b));

function MultiSet#Difference<T>(MultiSet T, MultiSet T) : MultiSet T;

axiom (forall<T> a: MultiSet T, b: MultiSet T, o: Int :: 
  { MultiSet#Difference(a, b)[o] } 
  MultiSet#Difference(a, b)[o] == Math#clip(a[o] - b[o]));

axiom (forall<T> a: MultiSet T, b: MultiSet T, y: Int :: 
  { MultiSet#Difference(a, b), b[y], a[y] } 
  a[y] <= b[y] ==> MultiSet#Difference(a, b)[y] == 0);

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Card(MultiSet#Difference(a, b)) } 
  MultiSet#Card(MultiSet#Difference(a, b))
         + MultiSet#Card(MultiSet#Difference(b, a))
         + 2 * MultiSet#Card(MultiSet#Intersection(a, b))
       == MultiSet#Card(MultiSet#Union(a, b))
     && MultiSet#Card(MultiSet#Difference(a, b))
       == MultiSet#Card(a) - MultiSet#Card(MultiSet#Intersection(a, b)));

function MultiSet#Subset<T>(MultiSet T, MultiSet T) : bool;

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Subset(a, b) } 
  MultiSet#Subset(a, b) <==> (forall o: Int :: { a[o] } { b[o] } a[o] <= b[o]));

function MultiSet#Equal<T>(MultiSet T, MultiSet T) : bool;

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) <==> (forall o: Int :: { a[o] } { b[o] } a[o] == b[o]));

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) ==> a == b);

function MultiSet#Disjoint<T>(MultiSet T, MultiSet T) : bool;

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Disjoint(a, b) } 
  MultiSet#Disjoint(a, b)
     <==> (forall o: Int :: { a[o] } { b[o] } a[o] == 0 || b[o] == 0));

function MultiSet#FromSet<T>(Set T) : MultiSet T;

axiom (forall<T> s: Set T, a: Int :: 
  { MultiSet#FromSet(s)[a] } 
  (MultiSet#FromSet(s)[a] == 0 <==> !s[a])
     && (MultiSet#FromSet(s)[a] == 1 <==> s[a]));

axiom (forall<T> s: Set T :: 
  { MultiSet#Card(MultiSet#FromSet(s)) } 
  MultiSet#Card(MultiSet#FromSet(s)) == Set#Card(s));

function MultiSet#FromSeq<T>(Seq T) : MultiSet T;

axiom (forall<T> s: Seq T :: 
  { MultiSet#FromSeq(s) } 
  $IsGoodMultiSet(MultiSet#FromSeq(s)));

axiom (forall<T> s: Seq T :: 
  { MultiSet#Card(MultiSet#FromSeq(s)) } 
  MultiSet#Card(MultiSet#FromSeq(s)) == Seq#Length(s));

axiom (forall<T> s: Seq T, v: Int :: 
  { MultiSet#FromSeq(Seq#Build(s, v)) } 
  MultiSet#FromSeq(Seq#Build(s, v)) == MultiSet#UnionOne(MultiSet#FromSeq(s), v));

axiom (forall<T>  :: 
  MultiSet#FromSeq(Seq#Empty(): Seq T) == MultiSet#Empty(): MultiSet T);

axiom (forall<T> a: Seq T, b: Seq T :: 
  { MultiSet#FromSeq(Seq#Append(a, b)) } 
  MultiSet#FromSeq(Seq#Append(a, b))
     == MultiSet#Union(MultiSet#FromSeq(a), MultiSet#FromSeq(b)));

axiom (forall<T> s: Seq T, i: int, v: Int, x: Int :: 
  { MultiSet#FromSeq(Seq#Update(s, i, v))[x] } 
  0 <= i && i < Seq#Length(s)
     ==> MultiSet#FromSeq(Seq#Update(s, i, v))[x]
       == MultiSet#Union(MultiSet#Difference(MultiSet#FromSeq(s), MultiSet#Singleton(Seq#Index(s, i))), 
        MultiSet#Singleton(v))[x]);

axiom (forall<T> s: Seq T, x: Int :: 
  { MultiSet#FromSeq(s)[x] } 
  (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && x == Seq#Index(s, i))
     <==> 0 < MultiSet#FromSeq(s)[x]);
*/